<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Pokemon.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Pokemon.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue May 03 15:12:15 2016
<BR><P>
<H3>Maximum Stack Usage =        632 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MoveMenu_USEMOVE &rArr; Battle_RunFightSequence &rArr; printPokemonMenu &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[92]">Reset_Handler</a>
 <LI><a href="#[a2]">writecommand</a>
 <LI><a href="#[ef]">writedata</a>
 <LI><a href="#[10a]">Random_Init</a>
 <LI><a href="#[13a]">Random32</a>
 <LI><a href="#[c8]">Random</a>
 <LI><a href="#[13b]">DisableInterrupts</a>
 <LI><a href="#[13c]">EnableInterrupts</a>
 <LI><a href="#[13d]">StartCritical</a>
 <LI><a href="#[13e]">EndCritical</a>
 <LI><a href="#[13f]">WaitForInterrupt</a>
 <LI><a href="#[ab]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">NMI_Handler</a><BR>
 <LI><a href="#[18]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">HardFault_Handler</a><BR>
 <LI><a href="#[19]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">MemManage_Handler</a><BR>
 <LI><a href="#[1a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">BusFault_Handler</a><BR>
 <LI><a href="#[1b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">SVC_Handler</a><BR>
 <LI><a href="#[1d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">DebugMon_Handler</a><BR>
 <LI><a href="#[1e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">SysTick_Handler</a><BR>
 <LI><a href="#[2e]">ADC0Seq0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">ADC0Seq0_Handler</a><BR>
 <LI><a href="#[a2]">writecommand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">writecommand</a><BR>
 <LI><a href="#[c2]">cvString</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c2]">cvString</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e]">ADC0Seq0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2f]">ADC0Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[30]">ADC0Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[31]">ADC0Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[50]">ADC1Seq0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[51]">ADC1Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[52]">ADC1Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[53]">ADC1Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[15]">BagMenu_CANCEL</a> from pokebattle.o(i.BagMenu_CANCEL) referenced 2 times from pokebattle.o(.data)
 <LI><a href="#[14]">BagMenu_POKEBALL</a> from pokebattle.o(i.BagMenu_POKEBALL) referenced 2 times from pokebattle.o(.data)
 <LI><a href="#[e]">BattleMenu_BAG</a> from pokebattle.o(i.BattleMenu_BAG) referenced 2 times from pokebattle.o(.data)
 <LI><a href="#[c]">BattleMenu_FIGHT</a> from pokebattle.o(i.BattleMenu_FIGHT) referenced 2 times from pokebattle.o(.data)
 <LI><a href="#[f]">BattleMenu_POKEMON</a> from pokebattle.o(i.BattleMenu_POKEMON) referenced 2 times from pokebattle.o(.data)
 <LI><a href="#[d]">BattleMenu_RUN</a> from pokebattle.o(i.BattleMenu_RUN) referenced 10 times from pokebattle.o(.data)
 <LI><a href="#[1a]">BusFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[47]">CAN0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[48]">CAN1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[49]">CAN2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[b]">ChangePokemon_NO</a> from pokebattle.o(i.ChangePokemon_NO) referenced 6 times from pokebattle.o(.data)
 <LI><a href="#[a]">ChangePokemon_YES</a> from pokebattle.o(i.ChangePokemon_YES) referenced 2 times from pokebattle.o(.data)
 <LI><a href="#[39]">Comp0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3a]">Comp1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3b]">Comp2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4a]">Ethernet_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[55]">ExtBus_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[72]">FPU_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7a]">Fan0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3d]">FlashCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[20]">GPIOPortA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[21]">GPIOPortB_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[22]">GPIOPortC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[23]">GPIOPortD_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[24]">GPIOPortE_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3e]">GPIOPortF_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3f]">GPIOPortG_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[40]">GPIOPortH_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[56]">GPIOPortJ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[57]">GPIOPortK_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[58]">GPIOPortL_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[77]">GPIOPortM_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[78]">GPIOPortN_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7c]">GPIOPortP1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7d]">GPIOPortP2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7e]">GPIOPortP3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7f]">GPIOPortP4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[80]">GPIOPortP5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[81]">GPIOPortP6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[82]">GPIOPortP7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7b]">GPIOPortP_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[84]">GPIOPortQ1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[85]">GPIOPortQ2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[86]">GPIOPortQ3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[87]">GPIOPortQ4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[88]">GPIOPortQ5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[89]">GPIOPortQ6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8a]">GPIOPortQ7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[83]">GPIOPortQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8b]">GPIOPortR_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8c]">GPIOPortS_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">GoInside</a> from actions.o(i.GoInside) referenced 2 times from maps.o(.data)
 <LI><a href="#[4]">GoOutside</a> from actions.o(i.GoOutside) referenced 4 times from maps.o(.data)
 <LI><a href="#[18]">HardFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4b]">Hibernate_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[28]">I2C0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[45]">I2C1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[60]">I2C2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[61]">I2C3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[75]">I2C4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[76]">I2C5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[54]">I2S0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[74]">LPC0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[19]">MemManage_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[11]">MoveMenu_CANCEL</a> from pokebattle.o(i.MoveMenu_CANCEL) referenced 8 times from pokebattle.o(.data)
 <LI><a href="#[10]">MoveMenu_USEMOVE</a> from pokebattle.o(i.MoveMenu_USEMOVE) referenced 8 times from pokebattle.o(.data)
 <LI><a href="#[17]">NMI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[73]">PECI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[29]">PWM0Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2a]">PWM0Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2b]">PWM0Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2c]">PWM0Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4d]">PWM0Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[91]">PWM1Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8d]">PWM1Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8e]">PWM1Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8f]">PWM1Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[90]">PWM1Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[13]">PokemonMenu_CANCEL</a> from pokebattle.o(i.PokemonMenu_CANCEL) referenced 16 times from pokebattle.o(.data)
 <LI><a href="#[12]">PokemonMenu_SPOTX</a> from pokebattle.o(i.PokemonMenu_SPOTX) referenced 12 times from pokebattle.o(.data)
 <LI><a href="#[2d]">Quadrature0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[46]">Quadrature1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[79]">Quadrature2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[92]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">RunMenu_NO</a> from pokebattle.o(i.RunMenu_NO) referenced 6 times from pokebattle.o(.data)
 <LI><a href="#[8]">RunMenu_YES</a> from pokebattle.o(i.RunMenu_YES) referenced 2 times from pokebattle.o(.data)
 <LI><a href="#[27]">SSI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[42]">SSI1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[59]">SSI2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5a]">SSI3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1c]">SVC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">ShiftMenu_CANCEL</a> from pokebattle.o(i.ShiftMenu_CANCEL) referenced 6 times from pokebattle.o(.data)
 <LI><a href="#[6]">ShiftMenu_SHIFT_</a> from pokebattle.o(i.ShiftMenu_SHIFT_) referenced 2 times from pokebattle.o(.data)
 <LI><a href="#[3]">SpawnWild</a> from actions.o(i.SpawnWild) referenced 2 times from maps.o(.data)
 <LI><a href="#[3c]">SysCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1f]">SysTick_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[33]">Timer0A_Handler</a> from timer0.o(i.Timer0A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[34]">Timer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[35]">Timer1A_Handler</a> from timer1.o(i.Timer1A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[36]">Timer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[37]">Timer2A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[38]">Timer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[43]">Timer3A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[44]">Timer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[62]">Timer4A_Handler</a> from texas.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[63]">Timer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[64]">Timer5A_Handler</a> from texas.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[65]">Timer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[25]">UART0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[26]">UART1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[41]">UART2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5b]">UART3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5c]">UART4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5d]">UART5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5e]">UART6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5f]">UART7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4c]">USB0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1b]">UsageFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[32]">WDT_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[66]">WideTimer0A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[67]">WideTimer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[68]">WideTimer1A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[69]">WideTimer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6a]">WideTimer2A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6b]">WideTimer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6c]">WideTimer3A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6d]">WideTimer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6e]">WideTimer4A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6f]">WideTimer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[70]">WideTimer5A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[71]">WideTimer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4f]">uDMA_Error</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4e]">uDMA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[92]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>ADC0Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC0Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC0Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC0Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ADC1Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ADC1Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ADC1Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ADC1Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>Comp0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>Comp1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>Comp2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>Ethernet_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ExtBus_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>Fan0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FlashCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>GPIOPortA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>GPIOPortB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPIOPortC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPIOPortD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPIOPortE_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPIOPortF_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIOPortG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIOPortH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIOPortJ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>GPIOPortK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>GPIOPortL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIOPortM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIOPortN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>GPIOPortP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>GPIOPortP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>GPIOPortP3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>GPIOPortP4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>GPIOPortP5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>GPIOPortP6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>GPIOPortP7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>GPIOPortP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>GPIOPortQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>GPIOPortQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>GPIOPortQ3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>GPIOPortQ4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>GPIOPortQ5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>GPIOPortQ6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>GPIOPortQ7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>GPIOPortQ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>GPIOPortR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>GPIOPortS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>Hibernate_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2S0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>LPC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PECI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM0Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM0Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM0Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM0Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>PWM0Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>PWM1Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>PWM1Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>PWM1Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>PWM1Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>PWM1Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Quadrature0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>Quadrature1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>Quadrature2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SSI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SSI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SSI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SSI3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SysCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Timer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>Timer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>Timer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>Timer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>Timer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>Timer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Timer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Timer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USB0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>WideTimer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>WideTimer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>WideTimer1A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>WideTimer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>WideTimer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>WideTimer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>WideTimer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>WideTimer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>WideTimer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>WideTimer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>WideTimer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>WideTimer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>uDMA_Error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>uDMA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[94]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[117]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[118]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[119]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[11a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[11b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[120]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[121]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[122]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[123]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[124]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[125]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[126]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[127]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[128]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[130]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[132]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[133]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[95]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[136]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[97]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[99]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[137]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Battle_RunFSM &rArr; PokemonMenu_Controller &rArr; PokemonMenu_MoveSpots &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[138]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ac]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[139]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a0]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a2]"></a>writecommand</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, lcd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetRotation
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[ef]"></a>writedata</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetRotation
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PrintPerson
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PrintMap
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastVLine
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastHLine
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[10a]"></a>Random_Init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, random.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>Random32</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, random.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>Random</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, random.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Map
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throwPokeBall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpawnWild
</UL>

<P><STRONG><a name="[13b]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a8]"></a>ADC1_Init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, texas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
</UL>

<P><STRONG><a name="[a7]"></a>SetCode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, texas.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
</UL>

<P><STRONG><a name="[a6]"></a>UART0_Init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, texas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
</UL>

<P><STRONG><a name="[a5]"></a>SetCourse</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, texas.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
</UL>

<P><STRONG><a name="[a4]"></a>PLL_Init</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, texas.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
</UL>

<P><STRONG><a name="[a3]"></a>TExaS_Init</STRONG> (Thumb, 282 bytes, Stack size 4 bytes, texas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TExaS_Init &rArr; UART0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCourse
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>StopTimer4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>StartTimer4</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>Timer4A_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, texas.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>ADC1_In</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, texas.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5A_Handler
</UL>

<P><STRONG><a name="[64]"></a>Timer5A_Handler</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, texas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timer5A_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_In
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>TExaS_Stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>copy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>SetMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>UART0_InChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>UART0_InCharNonBlocking</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>UART0_OutChar</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>UART0_OutCharNonBlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPersonLinks
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throwPokeBall
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchEnemyPokemon
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMenu_SHIFT
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_USEMOVE
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpawnWild
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[9d]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[150]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[151]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>AisPushed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, joystick.o(i.AisPushed))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Say
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catchError
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoOptionMenu_Controller
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SayDialogue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Controller
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourOptionMenu_Controller
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_ExitScreen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_EndConditions
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_Controller
</UL>

<P><STRONG><a name="[c6]"></a>Battle_Init</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, pokebattle.o(i.Battle_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Battle_Init &rArr; ST7735_Color565
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Color565
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>Battle_RunFSM</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, pokebattle.o(i.Battle_RunFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = Battle_RunFSM &rArr; PokemonMenu_Controller &rArr; PokemonMenu_MoveSpots &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catchError
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoOptionMenu_Controller
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Controller
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourOptionMenu_Controller
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_ExitScreen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_EndConditions
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpawnWild
</UL>

<P><STRONG><a name="[b5]"></a>BisPushed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, joystick.o(i.BisPushed))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Say
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoOptionMenu_Controller
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SayDialogue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Controller
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourOptionMenu_Controller
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_Controller
</UL>

<P><STRONG><a name="[109]"></a>ButtonsAB_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, joystick.o(i.ButtonsAB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ButtonsAB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>CheckForAction</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, graphics.o(i.CheckForAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = CheckForAction &rArr; SayDialog &rArr; Say &rArr; Reload_Map &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDir
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SayDialog
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, actions.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Say
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOutside
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoInside
</UL>

<P><STRONG><a name="[105]"></a>Delay1ms</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, st7735.o(i.Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[5]"></a>GoInside</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, actions.o(i.GoInside))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GoInside &rArr; Map_Init &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Map
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maps.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>GoOutside</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, actions.o(i.GoOutside))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GoOutside &rArr; Map_Init &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Map
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maps.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>Joystick_In</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, joystick.o(i.Joystick_In))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoOptionMenu_Controller
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Controller
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourOptionMenu_Controller
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_Controller
</UL>

<P><STRONG><a name="[108]"></a>Joystick_Init</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, joystick.o(i.Joystick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Joystick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>Joystick_getDirection</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, joystick.o(i.Joystick_getDirection))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoOptionMenu_Controller
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Controller
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourOptionMenu_Controller
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_Controller
</UL>

<P><STRONG><a name="[df]"></a>Map_Init</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, graphics.o(i.Map_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Map_Init &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPersonLinks
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PrintMap
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOutside
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoInside
</UL>

<P><STRONG><a name="[e2]"></a>Move</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, graphics.o(i.Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Move &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spaceOccupied
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDir
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atEdge
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BisPushed
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PrintMap
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>Output_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, st7735.o(i.Output_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Output_Init &rArr; ST7735_InitR &rArr; ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetRotation
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>Reload_Map</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, graphics.o(i.Reload_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Reload_Map &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PrintMap
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Say
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMenu_YES
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_ExitScreen
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoOutside
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoInside
</UL>

<P><STRONG><a name="[c7]"></a>ST7735_Color565</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st7735.o(i.ST7735_Color565))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7735_Color565
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUserHealthBox
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_MoveSpots
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_USEMOVE
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_CANCEL
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
</UL>

<P><STRONG><a name="[b7]"></a>ST7735_DrawBitmap</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, st7735.o(i.ST7735_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUserHealthBox
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTwoOptionMenu
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMoveMenu
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printEnemyHealthBox
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleScreen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleMenu
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBagMenu
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoOptionMenu_MoveCursor
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMenu_SHIFT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Highlight
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourOptionMenu_MoveCursor
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_MoveCursor
</UL>

<P><STRONG><a name="[ed]"></a>ST7735_DrawBitmapT</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, st7735.o(i.ST7735_DrawBitmapT))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throwPokeBall
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Highlight
</UL>

<P><STRONG><a name="[ec]"></a>ST7735_DrawChar</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, st7735.o(i.ST7735_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Say
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUserHealthBox
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTwoOptionMenu
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMoveMenu
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printEnemyHealthBox
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleMenu
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBagMenu
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SayDialogue
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Highlight
</UL>

<P><STRONG><a name="[cb]"></a>ST7735_DrawFastHLine</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, st7735.o(i.ST7735_DrawFastHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawFastHLine &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printEmptyPokemonBox
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBagMenu
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
</UL>

<P><STRONG><a name="[f2]"></a>ST7735_DrawFastVLine</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, st7735.o(i.ST7735_DrawFastVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawFastVLine &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printEmptyPokemonBox
</UL>

<P><STRONG><a name="[f0]"></a>ST7735_DrawPixel</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, st7735.o(i.ST7735_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmapT
</UL>

<P><STRONG><a name="[b8]"></a>ST7735_FillRect</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, st7735.o(i.ST7735_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Say
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUserHealthBox
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHP
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printEnemyHealthBox
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoOptionMenu_MoveCursor
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SayDialogue
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Highlight
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourOptionMenu_MoveCursor
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_UpdateExp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_UpdateEnemyHealth
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_MoveCursor
</UL>

<P><STRONG><a name="[c4]"></a>ST7735_FillScreen</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, st7735.o(i.ST7735_FillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleScreen
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBagMenu
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMenu_SHIFT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_ExitScreen
</UL>

<P><STRONG><a name="[e7]"></a>ST7735_InitR</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, st7735.o(i.ST7735_InitR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ST7735_InitR &rArr; ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Init
</UL>

<P><STRONG><a name="[e1]"></a>ST7735_PrintMap</STRONG> (Thumb, 1218 bytes, Stack size 88 bytes, st7735.o(i.ST7735_PrintMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PrintPerson
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SayDialog
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Map
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Init
</UL>

<P><STRONG><a name="[f6]"></a>ST7735_PrintPerson</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, st7735.o(i.ST7735_PrintPerson))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ST7735_PrintPerson
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PrintMap
</UL>

<P><STRONG><a name="[f5]"></a>ST7735_SetCursor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, st7735.o(i.ST7735_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[e8]"></a>ST7735_SetRotation</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, st7735.o(i.ST7735_SetRotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ST7735_SetRotation
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Init
</UL>

<P><STRONG><a name="[f7]"></a>Say</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, actions.o(i.Say))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Say &rArr; Reload_Map &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BisPushed
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Map
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SayDialog
</UL>

<P><STRONG><a name="[dc]"></a>SayDialog</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, graphics.o(i.SayDialog))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SayDialog &rArr; Say &rArr; Reload_Map &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Say
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oppositeDir
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PrintMap
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForAction
</UL>

<P><STRONG><a name="[e0]"></a>SetPersonLinks</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, graphics.o(i.SetPersonLinks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetPersonLinks &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Init
</UL>

<P><STRONG><a name="[3]"></a>SpawnWild</STRONG> (Thumb, 46 bytes, Stack size 80 bytes, actions.o(i.SpawnWild))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = SpawnWild &rArr; Battle_RunFSM &rArr; PokemonMenu_Controller &rArr; PokemonMenu_MoveSpots &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maps.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>Timer0A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer0.o(i.Timer0A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>Timer1A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer1.o(i.Timer1A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>atEdge</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, graphics.o(i.atEdge))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move
</UL>

<P><STRONG><a name="[9c]"></a>main</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, pokemon.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = main &rArr; Battle_RunFSM &rArr; PokemonMenu_Controller &rArr; PokemonMenu_MoveSpots &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Map
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_getDirection
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_In
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForAction
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsAB_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f8]"></a>oppositeDir</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, graphics.o(i.oppositeDir))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SayDialog
</UL>

<P><STRONG><a name="[ee]"></a>setAddrWindow</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, st7735.o(i.setAddrWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_PrintMap
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastVLine
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastHLine
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>

<P><STRONG><a name="[db]"></a>setDir</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, graphics.o(i.setDir))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForAction
</UL>

<P><STRONG><a name="[e3]"></a>spaceOccupied</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, graphics.o(i.spaceOccupied))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spaceOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[10b]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[111]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
</UL>

<P><STRONG><a name="[10f]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
</UL>

<P><STRONG><a name="[110]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
</UL>

<P><STRONG><a name="[112]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
</UL>

<P><STRONG><a name="[155]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[ff]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
</UL>

<P><STRONG><a name="[156]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
</UL>

<P><STRONG><a name="[113]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10e]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[10d]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
</UL>

<P><STRONG><a name="[114]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[116]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f4]"></a>commandList</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, st7735.o(i.commandList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[f3]"></a>commonInit</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, st7735.o(i.commonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = commonInit &rArr; commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[f1]"></a>pushColor</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7735.o(i.pushColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = pushColor
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
</UL>

<P><STRONG><a name="[15]"></a>BagMenu_CANCEL</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pokebattle.o(i.BagMenu_CANCEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BagMenu_CANCEL &rArr; printBattleScreen &rArr; printUserHealthBox &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleScreen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>BagMenu_Controller</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, pokebattle.o(i.BagMenu_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = BagMenu_Controller &rArr; BagMenu_MoveCursor &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BisPushed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_getDirection
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_In
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_MoveCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
</UL>

<P><STRONG><a name="[b3]"></a>BagMenu_MoveCursor</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, pokebattle.o(i.BagMenu_MoveCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = BagMenu_MoveCursor &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_Controller
</UL>

<P><STRONG><a name="[14]"></a>BagMenu_POKEBALL</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pokebattle.o(i.BagMenu_POKEBALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = BagMenu_POKEBALL &rArr; throwPokeBall &rArr; printDialogue &rArr; SayDialogue &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throwPokeBall
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>BattleMenu_BAG</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pokebattle.o(i.BattleMenu_BAG))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = BattleMenu_BAG &rArr; printBagMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBagMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>BattleMenu_FIGHT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pokebattle.o(i.BattleMenu_FIGHT))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BattleMenu_FIGHT &rArr; printMoveMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPPMenu
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMoveMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>BattleMenu_POKEMON</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pokebattle.o(i.BattleMenu_POKEMON))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = BattleMenu_POKEMON &rArr; printPokemonMenu &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>BattleMenu_RUN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pokebattle.o(i.BattleMenu_RUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = BattleMenu_RUN &rArr; printTwoOptionMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTwoOptionMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>Battle_EndConditions</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, pokebattle.o(i.Battle_EndConditions))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Battle_EndConditions &rArr; printPokemonMenu &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvString
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_UpdateExp
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
</UL>

<P><STRONG><a name="[c3]"></a>Battle_ExitScreen</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, pokebattle.o(i.Battle_ExitScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Battle_ExitScreen &rArr; Reload_Map &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Map
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
</UL>

<P><STRONG><a name="[c9]"></a>Battle_LoadScreen</STRONG> (Thumb, 934 bytes, Stack size 48 bytes, pokebattle.o(i.Battle_LoadScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Battle_LoadScreen &rArr; Reload_Map &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Map
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastHLine
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUserHealthBox
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printEnemyHealthBox
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleMenu
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
</UL>

<P><STRONG><a name="[d3]"></a>Battle_RunFightSequence</STRONG> (Thumb, 716 bytes, Stack size 224 bytes, pokebattle.o(i.Battle_RunFightSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Battle_RunFightSequence &rArr; printPokemonMenu &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Color565
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseSTATUS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_UpdateUserHealth
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_USEMOVE
</UL>

<P><STRONG><a name="[d8]"></a>Battle_UpdateEnemyHealth</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, pokebattle.o(i.Battle_UpdateEnemyHealth))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Battle_UpdateEnemyHealth &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_USEMOVE
</UL>

<P><STRONG><a name="[c1]"></a>Battle_UpdateExp</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pokebattle.o(i.Battle_UpdateExp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Battle_UpdateExp &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_EndConditions
</UL>

<P><STRONG><a name="[d6]"></a>Battle_UpdateUserHealth</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pokebattle.o(i.Battle_UpdateUserHealth))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Battle_UpdateUserHealth &rArr; printHP &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHP
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
</UL>

<P><STRONG><a name="[b]"></a>ChangePokemon_NO</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pokebattle.o(i.ChangePokemon_NO))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ChangePokemon_NO &rArr; printBattleMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ChangePokemon_YES</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pokebattle.o(i.ChangePokemon_YES))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ChangePokemon_YES &rArr; printPokemonMenu &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>Delay1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pokebattle.o(i.Delay1))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throwPokeBall
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoOptionMenu_Controller
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMenu_SHIFT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SayDialogue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Controller
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourOptionMenu_Controller
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_ExitScreen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_Controller
</UL>

<P><STRONG><a name="[fc]"></a>Fire</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pokebattle.o(i.Fire))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
</UL>

<P><STRONG><a name="[cf]"></a>FourOptionMenu_Controller</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, pokebattle.o(i.FourOptionMenu_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = FourOptionMenu_Controller &rArr; FourOptionMenu_MoveCursor &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BisPushed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_getDirection
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_In
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourOptionMenu_MoveCursor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
</UL>

<P><STRONG><a name="[dd]"></a>FourOptionMenu_MoveCursor</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, pokebattle.o(i.FourOptionMenu_MoveCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = FourOptionMenu_MoveCursor &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourOptionMenu_Controller
</UL>

<P><STRONG><a name="[fe]"></a>Grass</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pokebattle.o(i.Grass))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
</UL>

<P><STRONG><a name="[11]"></a>MoveMenu_CANCEL</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, pokebattle.o(i.MoveMenu_CANCEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MoveMenu_CANCEL &rArr; printBattleMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Color565
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>MoveMenu_USEMOVE</STRONG> (Thumb, 376 bytes, Stack size 192 bytes, pokebattle.o(i.MoveMenu_USEMOVE))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = MoveMenu_USEMOVE &rArr; Battle_RunFightSequence &rArr; printPokemonMenu &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Color565
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchEnemyPokemon
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseSTATUS
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_UpdateEnemyHealth
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>PokemonMenu_CANCEL</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pokebattle.o(i.PokemonMenu_CANCEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PokemonMenu_CANCEL &rArr; printBattleScreen &rArr; printUserHealthBox &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleScreen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>PokemonMenu_Controller</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, pokebattle.o(i.PokemonMenu_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = PokemonMenu_Controller &rArr; PokemonMenu_MoveSpots &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BisPushed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_getDirection
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_In
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_MoveSpots
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
</UL>

<P><STRONG><a name="[ea]"></a>PokemonMenu_Highlight</STRONG> (Thumb, 662 bytes, Stack size 96 bytes, pokebattle.o(i.PokemonMenu_Highlight))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmapT
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHP
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printEmptyPokemonBox
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_MoveSpots
</UL>

<P><STRONG><a name="[e9]"></a>PokemonMenu_MoveSpots</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, pokebattle.o(i.PokemonMenu_MoveSpots))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = PokemonMenu_MoveSpots &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Color565
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Highlight
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Controller
</UL>

<P><STRONG><a name="[12]"></a>PokemonMenu_SPOTX</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pokebattle.o(i.PokemonMenu_SPOTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = PokemonMenu_SPOTX &rArr; printTwoOptionMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTwoOptionMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>RunMenu_NO</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pokebattle.o(i.RunMenu_NO))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RunMenu_NO &rArr; printBattleMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>RunMenu_YES</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pokebattle.o(i.RunMenu_YES))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RunMenu_YES &rArr; Reload_Map &rArr; ST7735_PrintMap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>SayDialogue</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, pokebattle.o(i.SayDialogue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SayDialogue &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BisPushed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
</UL>

<P><STRONG><a name="[7]"></a>ShiftMenu_CANCEL</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pokebattle.o(i.ShiftMenu_CANCEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ShiftMenu_CANCEL &rArr; printPokemonMenu &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>ShiftMenu_SHIFT</STRONG> (Thumb, 190 bytes, Stack size 112 bytes, pokebattle.o(i.ShiftMenu_SHIFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ShiftMenu_SHIFT &rArr; printDialogue &rArr; SayDialogue &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUserHealthBox
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printEnemyHealthBox
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMenu_SHIFT_
</UL>

<P><STRONG><a name="[6]"></a>ShiftMenu_SHIFT_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pokebattle.o(i.ShiftMenu_SHIFT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ShiftMenu_SHIFT_ &rArr; ShiftMenu_SHIFT &rArr; printDialogue &rArr; SayDialogue &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMenu_SHIFT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pokebattle.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>TwoOptionMenu_Controller</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, pokebattle.o(i.TwoOptionMenu_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = TwoOptionMenu_Controller &rArr; TwoOptionMenu_MoveCursor &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BisPushed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_getDirection
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Joystick_In
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoOptionMenu_MoveCursor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
</UL>

<P><STRONG><a name="[fb]"></a>TwoOptionMenu_MoveCursor</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, pokebattle.o(i.TwoOptionMenu_MoveCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TwoOptionMenu_MoveCursor &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoOptionMenu_Controller
</UL>

<P><STRONG><a name="[fd]"></a>Water</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pokebattle.o(i.Water))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcDam
</UL>

<P><STRONG><a name="[d5]"></a>calcDam</STRONG> (Thumb, 418 bytes, Stack size 88 bytes, pokebattle.o(i.calcDam))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = calcDam &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Grass
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_USEMOVE
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
</UL>

<P><STRONG><a name="[d2]"></a>catchError</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pokebattle.o(i.catchError))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = catchError &rArr; printDialogue &rArr; SayDialogue &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFSM
</UL>

<P><STRONG><a name="[d4]"></a>chooseSTATUS</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, pokebattle.o(i.chooseSTATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = chooseSTATUS &rArr; printDialogue &rArr; SayDialogue &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_USEMOVE
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
</UL>

<P><STRONG><a name="[c2]"></a>cvString</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, pokebattle.o(i.cvString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cvString &rArr;  cvString (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvString
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvString
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_EndConditions
</UL>

<P><STRONG><a name="[107]"></a>pop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pokebattle.o(i.pop))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvString
</UL>

<P><STRONG><a name="[bb]"></a>printBagMenu</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, pokebattle.o(i.printBagMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = printBagMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastHLine
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattleMenu_BAG
</UL>

<P><STRONG><a name="[af]"></a>printBattleMenu</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, pokebattle.o(i.printBattleMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = printBattleMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunMenu_NO
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_CANCEL
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_CANCEL
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePokemon_NO
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_CANCEL
</UL>

<P><STRONG><a name="[ad]"></a>printBattleScreen</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, pokebattle.o(i.printBattleScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = printBattleScreen &rArr; printUserHealthBox &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUserHealthBox
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printEnemyHealthBox
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throwPokeBall
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_CANCEL
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_POKEBALL
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_CANCEL
</UL>

<P><STRONG><a name="[ba]"></a>printDialogue</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, pokebattle.o(i.printDialogue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = printDialogue &rArr; SayDialogue &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BisPushed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AisPushed
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SayDialogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throwPokeBall
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchEnemyPokemon
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chooseSTATUS
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catchError
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMenu_SHIFT
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_USEMOVE
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_EndConditions
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_POKEBALL
</UL>

<P><STRONG><a name="[eb]"></a>printEmptyPokemonBox</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, pokebattle.o(i.printEmptyPokemonBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = printEmptyPokemonBox &rArr; ST7735_DrawFastVLine &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastVLine
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Highlight
</UL>

<P><STRONG><a name="[cc]"></a>printEnemyHealthBox</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, pokebattle.o(i.printEnemyHealthBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = printEnemyHealthBox &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleScreen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMenu_SHIFT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
</UL>

<P><STRONG><a name="[d9]"></a>printHP</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pokebattle.o(i.printHP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = printHP &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printUserHealthBox
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Highlight
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_UpdateUserHealth
</UL>

<P><STRONG><a name="[bc]"></a>printMoveMenu</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, pokebattle.o(i.printMoveMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = printMoveMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattleMenu_FIGHT
</UL>

<P><STRONG><a name="[bd]"></a>printPPMenu</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pokebattle.o(i.printPPMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = printPPMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattleMenu_FIGHT
</UL>

<P><STRONG><a name="[be]"></a>printPokemonMenu</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, pokebattle.o(i.printPokemonMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = printPokemonMenu &rArr; PokemonMenu_Highlight &rArr; ST7735_DrawBitmapT &rArr; ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawFastHLine
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Color565
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printEmptyPokemonBox
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_Highlight
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMenu_CANCEL
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePokemon_YES
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_EndConditions
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattleMenu_POKEMON
</UL>

<P><STRONG><a name="[ae]"></a>printRect</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, pokebattle.o(i.printRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throwPokeBall
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchEnemyPokemon
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTwoOptionMenu
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPokemonMenu
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPPMenu
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMoveMenu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleMenu
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBagMenu
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catchError
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_CANCEL
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_USEMOVE
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_CANCEL
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_RunFightSequence
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_EndConditions
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_POKEBALL
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_CANCEL
</UL>

<P><STRONG><a name="[bf]"></a>printTwoOptionMenu</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, pokebattle.o(i.printTwoOptionMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = printTwoOptionMenu &rArr; printRect &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PokemonMenu_SPOTX
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattleMenu_RUN
</UL>

<P><STRONG><a name="[cd]"></a>printUserHealthBox</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, pokebattle.o(i.printUserHealthBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = printUserHealthBox &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Color565
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printHP
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleScreen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftMenu_SHIFT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battle_LoadScreen
</UL>

<P><STRONG><a name="[106]"></a>push</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pokebattle.o(i.push))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvString
</UL>

<P><STRONG><a name="[e5]"></a>switchEnemyPokemon</STRONG> (Thumb, 248 bytes, Stack size 120 bytes, pokebattle.o(i.switchEnemyPokemon))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = switchEnemyPokemon &rArr; printDialogue &rArr; SayDialogue &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveMenu_USEMOVE
</UL>

<P><STRONG><a name="[b9]"></a>throwPokeBall</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, pokebattle.o(i.throwPokeBall))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = throwPokeBall &rArr; printDialogue &rArr; SayDialogue &rArr; ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmapT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printDialogue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBattleScreen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BagMenu_POKEBALL
</UL>

<P><STRONG><a name="[115]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[10c]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
